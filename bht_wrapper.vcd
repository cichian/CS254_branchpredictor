$version Generated by VerilatedVcd $end
$date Sun Mar 13 16:57:41 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 1 clk_i $end
  $var wire  1 4 debug_mode_i $end
  $var wire  1 3 flush_i $end
  $var wire 64 8 pc_i [63:0] $end
  $var wire  1 < result_taken_o $end
  $var wire  1 ; result_valid_o $end
  $var wire  1 2 rst_ni $end
  $var wire  1 : taken_i $end
  $var wire  1 7 valid_i $end
  $var wire 64 5 vpc_i [63:0] $end
  $scope module bht_wrapper $end
   $var wire  4 & bht_prediction [3:0] $end
   $var wire 66 # bht_update [65:0] $end
   $var wire  1 1 clk_i $end
   $var wire  1 4 debug_mode_i $end
   $var wire  1 3 flush_i $end
   $var wire 64 8 pc_i [63:0] $end
   $var wire  1 < result_taken_o $end
   $var wire  1 ; result_valid_o $end
   $var wire  1 2 rst_ni $end
   $var wire  1 : taken_i $end
   $var wire  1 7 valid_i $end
   $var wire 64 5 vpc_i [63:0] $end
   $scope module bht_ins $end
    $var wire 32 > NR_ENTRIES [31:0] $end
    $var wire 32 @ NR_ROWS [31:0] $end
    $var wire 32 ? OFFSET [31:0] $end
    $var wire 32 A PREDICTION_BITS [31:0] $end
    $var wire 32 ? ROW_ADDR_BITS [31:0] $end
    $var wire  4 & bht_prediction_o [3:0] $end
    $var wire 66 # bht_update_i [65:0] $end
    $var wire  1 1 clk_i $end
    $var wire  1 4 debug_mode_i $end
    $var wire  1 3 flush_i $end
    $var wire 32 B i [31:0] $end
    $var wire  9 = index [8:0] $end
    $var wire 64 ) instruction_pc[0] [63:0] $end
    $var wire 64 + instruction_pc[1] [63:0] $end
    $var wire  1 2 rst_ni $end
    $var wire  9 ' update_pc [8:0] $end
    $var wire  1 ( update_row_index [0:0] $end
    $var wire 64 5 vpc_i [63:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 / i [31:0] $end
     $scope module unnamedblk2 $end
      $var wire 32 0 j [31:0] $end
     $upscope $end
    $upscope $end
    $scope module unnamedblk3 $end
     $var wire 32 - i [31:0] $end
     $scope module unnamedblk4 $end
      $var wire 32 . j [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
b100000000000000000000000000000000100000000100011101111001100100000 #
b0101 &
b001100100 '
0(
b0000000000000000000000000000000010000000010001110111100110010000 )
b0000000000000000000000000000000010000000010001110111100110010010 +
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
01
12
03
04
b0000000000000000000000000000000010000000010001110111100110010000 5
17
b0000000000000000000000000000000010000000010001110111100110010000 8
0:
0;
1<
b001100100 =
b00000000000000000000010000000000 >
b00000000000000000000000000000001 ?
b00000000000000000000001000000000 @
b00000000000000000000000000001011 A
b00000000000000000000000000000010 B
#2
#3
#4
#5
b00000000000000000000001000000000 /
b00000000000000000000000000000010 0
11
02
#6
#7
#8
#9
#10
01
#11
#12
#13
#14
#15
11
#16
#17
#18
#19
#20
01
#21
12
#22
#23
#24
#25
b0110 &
11
1;
0<
#26
#27
#28
#29
#30
b100000000000000000000000000000000100000000100011101111001100100001 #
01
1:
#31
#32
#33
#34
#35
b0101 &
11
0;
1<
#36
#37
#38
#39
#40
01
#41
#42
#43
#44
#45
11
#46
#47
#48
#49
#50
01
#51
#52
#53
#54
#55
11
#56
#57
#58
#59
#60
01
